// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  name String @unique
  phone String @unique
  password String
  verified Boolean @default(false)
  createAt DateTime @default(now()) @map("create_at")
  updateAt DateTime @updatedAt @map("update_at")
  Administratrator Administratrator[]
  Freelancer        Freelancer[]
  Service           Service[]


  @@map("users")
}

model Administratrator {
  id String @id @default(uuid())
  email String @unique
  userId String @unique @map("user_id")

  user User @relation(fields: [userId], references: [id])
  @@map("administratrator")
}

model Freelancer {
  id String @id @default(uuid())
  userId String @unique @map("user_id")
  documentType String @map("document_type")
  documentId String @unique @map("document_id")
  serviceCategory String @map("service_category")
  description String
  rating  Int?
  Service          Service[]

  user User @relation(fields: [userId], references: [id])
  @@map("freelancer")
}


model ServiceCategory {
  id String @id @default(uuid())
  name String @unique

  Service      Service[]
}

model Service {
  id String @id @default(uuid())
  clientId String @map("client_id")
  freelancerId String @map("freelancer_id") 
  categoryId String @map("category_id")
  description String
  locationCenter String
  status Boolean @default(true)

  user User @relation(fields: [clientId], references: [id])
  freelancer Freelancer @relation(fields: [freelancerId], references: [userId])
  category ServiceCategory @relation(fields: [categoryId], references: [id])

}
